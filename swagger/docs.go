// Package swagger Code generated by swaggo/swag. DO NOT EDIT
package swagger

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Returns a list of all counter and gauge metrics in plain text format.",
                "produces": [
                    "text/plain",
                    "text/html"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get all metrics",
                "responses": {
                    "200": {
                        "description": "List of metrics in plain text or HTML format",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/metrics/{type}/{name}": {
            "get": {
                "description": "Fetches the value of a metric based on the provided type and name.",
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Metrics"
                ],
                "summary": "Get a metric by type and name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Type of the metric",
                        "name": "type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Name of the metric",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The value of the metric",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Metric not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/ping": {
            "get": {
                "consumes": [
                    "text/plain"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Request for API health check",
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/update": {
            "post": {
                "description": "Updates a metric with the provided JSON payload.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Update a metric",
                "parameters": [
                    {
                        "description": "Metric data to update",
                        "name": "metrics",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Metrics"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated metric",
                        "schema": {
                            "$ref": "#/definitions/domain.Metrics"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or metric type",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/updates": {
            "post": {
                "description": "Updates multiple metrics with the provided JSON payload.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Update multiple metrics",
                "parameters": [
                    {
                        "description": "List of metrics to update",
                        "name": "metrics",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Metrics"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics updated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/value": {
            "post": {
                "description": "Retrieves a metric with the provided JSON payload.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get a metric",
                "parameters": [
                    {
                        "description": "Metric data to retrieve",
                        "name": "metrics",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Metrics"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Requested metric",
                        "schema": {
                            "$ref": "#/definitions/domain.Metrics"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload or metric type",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Metric not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Metrics": {
            "description": "Metrics request payload for metrics data.",
            "type": "object",
            "properties": {
                "delta": {
                    "description": "Delta is the value of the metric if it's a counter.\nExample: 10",
                    "type": "integer"
                },
                "id": {
                    "description": "ID is the name of the metric.\nExample: \"cpu_usage\"",
                    "type": "string"
                },
                "type": {
                    "description": "MType is the type of the metric (gauge or counter).\nExample: \"gauge\"",
                    "type": "string"
                },
                "value": {
                    "description": "Value is the value of the metric if it's a gauge.\nExample: 3.14",
                    "type": "number"
                }
            }
        }
    },
    "tags": [
        {
            "description": "\"Requests to check api health\"",
            "name": "Health"
        },
        {
            "description": "\"Requests to manipulate metrics\"",
            "name": "Metrics"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Metrics API",
	Description:      "Service for metrics storage",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
